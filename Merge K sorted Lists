#include <stdio.h>
#include <stdlib.h>


typedef struct {
    struct ListNode **heap;
    int size;
} MinHeap;


void swap(struct ListNode **a, struct ListNode **b) {
    struct ListNode *temp = *a;
    *a = *b;
    *b = temp;
}


void heapify(MinHeap *heap, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < heap->size && heap->heap[left]->val < heap->heap[smallest]->val)
        smallest = left;
    if (right < heap->size && heap->heap[right]->val < heap->heap[smallest]->val)
        smallest = right;

    if (smallest != i) {
        swap(&heap->heap[i], &heap->heap[smallest]);
        heapify(heap, smallest);
    }
}


struct ListNode *extractMin(MinHeap *heap) {
    if (heap->size == 0) return NULL;
    struct ListNode *minNode = heap->heap[0];
    heap->heap[0] = heap->heap[--heap->size];
    heapify(heap, 0);
    return minNode;
}


void insertHeap(MinHeap *heap, struct ListNode *node) {
    int i = heap->size++;
    while (i && node->val < heap->heap[(i - 1) / 2]->val) {
        heap->heap[i] = heap->heap[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    heap->heap[i] = node;
}


struct ListNode *mergeKLists(struct ListNode **lists, int listsSize) {
    if (listsSize == 0) return NULL;
    
    MinHeap heap;
    heap.heap = (struct ListNode **)malloc(listsSize * sizeof(struct ListNode *));
    heap.size = 0;

    for (int i = 0; i < listsSize; i++) {
        if (lists[i]) insertHeap(&heap, lists[i]);
    }

    struct ListNode dummy;
    struct ListNode *tail = &dummy;
    
    while (heap.size > 0) {
        struct ListNode *minNode = extractMin(&heap);
        tail->next = minNode;
        tail = tail->next;
        if (minNode->next) insertHeap(&heap, minNode->next);
    }
    
    free(heap.heap);
    return dummy.next;
}
