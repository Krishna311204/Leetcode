#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int largestRectangleArea(int* heights, int size) {
    int *stack = (int*)malloc(sizeof(int) * (size + 1));
    int top = -1;
    int maxArea = 0;
    
    for (int i = 0; i <= size; i++) {
        int h = (i == size) ? 0 : heights[i];
        while (top != -1 && heights[stack[top]] > h) {
            int height = heights[stack[top--]];
            int width = (top == -1) ? i : (i - stack[top] - 1);
            maxArea = (maxArea > height * width) ? maxArea : (height * width);
        }
        stack[++top] = i;
    }
    
    free(stack);
    return maxArea;
}

int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {
    if (matrixSize == 0 || matrixColSize[0] == 0) return 0;
    
    int cols = matrixColSize[0];
    int *heights = (int*)calloc(cols, sizeof(int));
    int maxArea = 0;
    
    for (int i = 0; i < matrixSize; i++) {
        for (int j = 0; j < cols; j++) {
            heights[j] = (matrix[i][j] == '1') ? (heights[j] + 1) : 0;
        }
        maxArea = (maxArea > largestRectangleArea(heights, cols)) ? maxArea : largestRectangleArea(heights, cols);
    }
    
    free(heights);
    return maxArea;
}
