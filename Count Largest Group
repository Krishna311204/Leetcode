class Solution:
    def countLargestGroup(self, n: int) -> int:
        digits = str(n)
        D = len(digits)
        max_sum = 9 * D

        best = 0
        groups = 0

        for target in range(1, max_sum + 1):
            memo = [[[-1] * 2 for _ in range(max_sum + 1)] for _ in range(D)]

            def dfs(pos: int, rem: int, tight: bool) -> int:
                if pos == D:
                    return 1 if rem == 0 else 0
                t = 1 if tight else 0
                if memo[pos][rem][t] != -1:
                    return memo[pos][rem][t]

                limit = int(digits[pos]) if tight else 9
                ans = 0
                for d in range(limit + 1):
                    if rem >= d:
                        ans += dfs(pos + 1, rem - d, tight and (d == limit))

                memo[pos][rem][t] = ans
                return ans

            cnt = dfs(0, target, True)

            if cnt > best:
                best = cnt
                groups = 1
            elif cnt == best:
                groups += 1

        return groups
